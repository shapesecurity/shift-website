(()=>{var t,s,e=Object.getOwnPropertyNames,i=(t={"node_modules/shift-ast/gen/index.js"(t){t.ArrayAssignmentTarget=class{constructor({elements:t,rest:s}){this.type="ArrayAssignmentTarget",this.elements=t,this.rest=s}},t.ArrayBinding=class{constructor({elements:t,rest:s}){this.type="ArrayBinding",this.elements=t,this.rest=s}},t.ArrayExpression=class{constructor({elements:t}){this.type="ArrayExpression",this.elements=t}},t.ArrowExpression=class{constructor({isAsync:t,params:s,body:e}){this.type="ArrowExpression",this.isAsync=t,this.params=s,this.body=e}},t.AssignmentExpression=class{constructor({binding:t,expression:s}){this.type="AssignmentExpression",this.binding=t,this.expression=s}},t.AssignmentTargetIdentifier=class{constructor({name:t}){this.type="AssignmentTargetIdentifier",this.name=t}},t.AssignmentTargetPropertyIdentifier=class{constructor({binding:t,init:s}){this.type="AssignmentTargetPropertyIdentifier",this.binding=t,this.init=s}},t.AssignmentTargetPropertyProperty=class{constructor({name:t,binding:s}){this.type="AssignmentTargetPropertyProperty",this.name=t,this.binding=s}},t.AssignmentTargetWithDefault=class{constructor({binding:t,init:s}){this.type="AssignmentTargetWithDefault",this.binding=t,this.init=s}},t.AwaitExpression=class{constructor({expression:t}){this.type="AwaitExpression",this.expression=t}},t.BinaryExpression=class{constructor({left:t,operator:s,right:e}){this.type="BinaryExpression",this.left=t,this.operator=s,this.right=e}},t.BindingIdentifier=class{constructor({name:t}){this.type="BindingIdentifier",this.name=t}},t.BindingPropertyIdentifier=class{constructor({binding:t,init:s}){this.type="BindingPropertyIdentifier",this.binding=t,this.init=s}},t.BindingPropertyProperty=class{constructor({name:t,binding:s}){this.type="BindingPropertyProperty",this.name=t,this.binding=s}},t.BindingWithDefault=class{constructor({binding:t,init:s}){this.type="BindingWithDefault",this.binding=t,this.init=s}},t.Block=class{constructor({statements:t}){this.type="Block",this.statements=t}},t.BlockStatement=class{constructor({block:t}){this.type="BlockStatement",this.block=t}},t.BreakStatement=class{constructor({label:t}){this.type="BreakStatement",this.label=t}},t.CallExpression=class{constructor({callee:t,arguments:s}){this.type="CallExpression",this.callee=t,this.arguments=s}},t.CatchClause=class{constructor({binding:t,body:s}){this.type="CatchClause",this.binding=t,this.body=s}},t.ClassDeclaration=class{constructor({name:t,super:s,elements:e}){this.type="ClassDeclaration",this.name=t,this.super=s,this.elements=e}},t.ClassElement=class{constructor({isStatic:t,method:s}){this.type="ClassElement",this.isStatic=t,this.method=s}},t.ClassExpression=class{constructor({name:t,super:s,elements:e}){this.type="ClassExpression",this.name=t,this.super=s,this.elements=e}},t.CompoundAssignmentExpression=class{constructor({binding:t,operator:s,expression:e}){this.type="CompoundAssignmentExpression",this.binding=t,this.operator=s,this.expression=e}},t.ComputedMemberAssignmentTarget=class{constructor({object:t,expression:s}){this.type="ComputedMemberAssignmentTarget",this.object=t,this.expression=s}},t.ComputedMemberExpression=class{constructor({object:t,expression:s}){this.type="ComputedMemberExpression",this.object=t,this.expression=s}},t.ComputedPropertyName=class{constructor({expression:t}){this.type="ComputedPropertyName",this.expression=t}},t.ConditionalExpression=class{constructor({test:t,consequent:s,alternate:e}){this.type="ConditionalExpression",this.test=t,this.consequent=s,this.alternate=e}},t.ContinueStatement=class{constructor({label:t}){this.type="ContinueStatement",this.label=t}},t.DataProperty=class{constructor({name:t,expression:s}){this.type="DataProperty",this.name=t,this.expression=s}},t.DebuggerStatement=class{constructor(){this.type="DebuggerStatement"}},t.Directive=class{constructor({rawValue:t}){this.type="Directive",this.rawValue=t}},t.DoWhileStatement=class{constructor({body:t,test:s}){this.type="DoWhileStatement",this.body=t,this.test=s}},t.EmptyStatement=class{constructor(){this.type="EmptyStatement"}},t.Export=class{constructor({declaration:t}){this.type="Export",this.declaration=t}},t.ExportAllFrom=class{constructor({moduleSpecifier:t}){this.type="ExportAllFrom",this.moduleSpecifier=t}},t.ExportDefault=class{constructor({body:t}){this.type="ExportDefault",this.body=t}},t.ExportFrom=class{constructor({namedExports:t,moduleSpecifier:s}){this.type="ExportFrom",this.namedExports=t,this.moduleSpecifier=s}},t.ExportFromSpecifier=class{constructor({name:t,exportedName:s}){this.type="ExportFromSpecifier",this.name=t,this.exportedName=s}},t.ExportLocalSpecifier=class{constructor({name:t,exportedName:s}){this.type="ExportLocalSpecifier",this.name=t,this.exportedName=s}},t.ExportLocals=class{constructor({namedExports:t}){this.type="ExportLocals",this.namedExports=t}},t.ExpressionStatement=class{constructor({expression:t}){this.type="ExpressionStatement",this.expression=t}},t.ForAwaitStatement=class{constructor({left:t,right:s,body:e}){this.type="ForAwaitStatement",this.left=t,this.right=s,this.body=e}},t.ForInStatement=class{constructor({left:t,right:s,body:e}){this.type="ForInStatement",this.left=t,this.right=s,this.body=e}},t.ForOfStatement=class{constructor({left:t,right:s,body:e}){this.type="ForOfStatement",this.left=t,this.right=s,this.body=e}},t.ForStatement=class{constructor({init:t,test:s,update:e,body:i}){this.type="ForStatement",this.init=t,this.test=s,this.update=e,this.body=i}},t.FormalParameters=class{constructor({items:t,rest:s}){this.type="FormalParameters",this.items=t,this.rest=s}},t.FunctionBody=class{constructor({directives:t,statements:s}){this.type="FunctionBody",this.directives=t,this.statements=s}},t.FunctionDeclaration=class{constructor({isAsync:t,isGenerator:s,name:e,params:i,body:r}){this.type="FunctionDeclaration",this.isAsync=t,this.isGenerator=s,this.name=e,this.params=i,this.body=r}},t.FunctionExpression=class{constructor({isAsync:t,isGenerator:s,name:e,params:i,body:r}){this.type="FunctionExpression",this.isAsync=t,this.isGenerator=s,this.name=e,this.params=i,this.body=r}},t.Getter=class{constructor({name:t,body:s}){this.type="Getter",this.name=t,this.body=s}},t.IdentifierExpression=class{constructor({name:t}){this.type="IdentifierExpression",this.name=t}},t.IfStatement=class{constructor({test:t,consequent:s,alternate:e}){this.type="IfStatement",this.test=t,this.consequent=s,this.alternate=e}},t.Import=class{constructor({defaultBinding:t,namedImports:s,moduleSpecifier:e}){this.type="Import",this.defaultBinding=t,this.namedImports=s,this.moduleSpecifier=e}},t.ImportNamespace=class{constructor({defaultBinding:t,namespaceBinding:s,moduleSpecifier:e}){this.type="ImportNamespace",this.defaultBinding=t,this.namespaceBinding=s,this.moduleSpecifier=e}},t.ImportSpecifier=class{constructor({name:t,binding:s}){this.type="ImportSpecifier",this.name=t,this.binding=s}},t.LabeledStatement=class{constructor({label:t,body:s}){this.type="LabeledStatement",this.label=t,this.body=s}},t.LiteralBooleanExpression=class{constructor({value:t}){this.type="LiteralBooleanExpression",this.value=t}},t.LiteralInfinityExpression=class{constructor(){this.type="LiteralInfinityExpression"}},t.LiteralNullExpression=class{constructor(){this.type="LiteralNullExpression"}},t.LiteralNumericExpression=class{constructor({value:t}){this.type="LiteralNumericExpression",this.value=t}},t.LiteralRegExpExpression=class{constructor({pattern:t,global:s,ignoreCase:e,multiLine:i,dotAll:r,unicode:n,sticky:o}){this.type="LiteralRegExpExpression",this.pattern=t,this.global=s,this.ignoreCase=e,this.multiLine=i,this.dotAll=r,this.unicode=n,this.sticky=o}},t.LiteralStringExpression=class{constructor({value:t}){this.type="LiteralStringExpression",this.value=t}},t.Method=class{constructor({isAsync:t,isGenerator:s,name:e,params:i,body:r}){this.type="Method",this.isAsync=t,this.isGenerator=s,this.name=e,this.params=i,this.body=r}},t.Module=class{constructor({directives:t,items:s}){this.type="Module",this.directives=t,this.items=s}},t.NewExpression=class{constructor({callee:t,arguments:s}){this.type="NewExpression",this.callee=t,this.arguments=s}},t.NewTargetExpression=class{constructor(){this.type="NewTargetExpression"}},t.ObjectAssignmentTarget=class{constructor({properties:t,rest:s}){this.type="ObjectAssignmentTarget",this.properties=t,this.rest=s}},t.ObjectBinding=class{constructor({properties:t,rest:s}){this.type="ObjectBinding",this.properties=t,this.rest=s}},t.ObjectExpression=class{constructor({properties:t}){this.type="ObjectExpression",this.properties=t}},t.ReturnStatement=class{constructor({expression:t}){this.type="ReturnStatement",this.expression=t}},t.Script=class{constructor({directives:t,statements:s}){this.type="Script",this.directives=t,this.statements=s}},t.Setter=class{constructor({name:t,param:s,body:e}){this.type="Setter",this.name=t,this.param=s,this.body=e}},t.ShorthandProperty=class{constructor({name:t}){this.type="ShorthandProperty",this.name=t}},t.SpreadElement=class{constructor({expression:t}){this.type="SpreadElement",this.expression=t}},t.SpreadProperty=class{constructor({expression:t}){this.type="SpreadProperty",this.expression=t}},t.StaticMemberAssignmentTarget=class{constructor({object:t,property:s}){this.type="StaticMemberAssignmentTarget",this.object=t,this.property=s}},t.StaticMemberExpression=class{constructor({object:t,property:s}){this.type="StaticMemberExpression",this.object=t,this.property=s}},t.StaticPropertyName=class{constructor({value:t}){this.type="StaticPropertyName",this.value=t}},t.Super=class{constructor(){this.type="Super"}},t.SwitchCase=class{constructor({test:t,consequent:s}){this.type="SwitchCase",this.test=t,this.consequent=s}},t.SwitchDefault=class{constructor({consequent:t}){this.type="SwitchDefault",this.consequent=t}},t.SwitchStatement=class{constructor({discriminant:t,cases:s}){this.type="SwitchStatement",this.discriminant=t,this.cases=s}},t.SwitchStatementWithDefault=class{constructor({discriminant:t,preDefaultCases:s,defaultCase:e,postDefaultCases:i}){this.type="SwitchStatementWithDefault",this.discriminant=t,this.preDefaultCases=s,this.defaultCase=e,this.postDefaultCases=i}},t.TemplateElement=class{constructor({rawValue:t}){this.type="TemplateElement",this.rawValue=t}},t.TemplateExpression=class{constructor({tag:t,elements:s}){this.type="TemplateExpression",this.tag=t,this.elements=s}},t.ThisExpression=class{constructor(){this.type="ThisExpression"}},t.ThrowStatement=class{constructor({expression:t}){this.type="ThrowStatement",this.expression=t}},t.TryCatchStatement=class{constructor({body:t,catchClause:s}){this.type="TryCatchStatement",this.body=t,this.catchClause=s}},t.TryFinallyStatement=class{constructor({body:t,catchClause:s,finalizer:e}){this.type="TryFinallyStatement",this.body=t,this.catchClause=s,this.finalizer=e}},t.UnaryExpression=class{constructor({operator:t,operand:s}){this.type="UnaryExpression",this.operator=t,this.operand=s}},t.UpdateExpression=class{constructor({isPrefix:t,operator:s,operand:e}){this.type="UpdateExpression",this.isPrefix=t,this.operator=s,this.operand=e}},t.VariableDeclaration=class{constructor({kind:t,declarators:s}){this.type="VariableDeclaration",this.kind=t,this.declarators=s}},t.VariableDeclarationStatement=class{constructor({declaration:t}){this.type="VariableDeclarationStatement",this.declaration=t}},t.VariableDeclarator=class{constructor({binding:t,init:s}){this.type="VariableDeclarator",this.binding=t,this.init=s}},t.WhileStatement=class{constructor({test:t,body:s}){this.type="WhileStatement",this.test=t,this.body=s}},t.WithStatement=class{constructor({object:t,body:s}){this.type="WithStatement",this.object=t,this.body=s}},t.YieldExpression=class{constructor({expression:t}){this.type="YieldExpression",this.expression=t}},t.YieldGeneratorExpression=class{constructor({expression:t}){this.type="YieldGeneratorExpression",this.expression=t}}}},function(){return s||(0,t[e(t)[0]])((s={exports:{}}).exports,s),s.exports});window.ast=i()})();